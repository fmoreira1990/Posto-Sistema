unit uDsmTanque;

interface

uses
  System.SysUtils, System.Classes, Datasnap.DSServer, 
  Datasnap.DSAuth, Datasnap.DSProviderDataModuleAdapter, uDsmBase,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.Phys.FB, FireDAC.Phys.FBDef, FireDAC.VCLUI.Wait,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  FireDAC.Stan.StorageBin, FireDAC.Stan.StorageJSON, FireDAC.Comp.Client,
  Data.DB, FireDAC.Comp.DataSet, FireDAC.Phys.IBBase;

type
  TDsmTanque = class(TDsmBase)
    QueryListaID_TANQUE: TIntegerField;
    QueryListaID_PRODUTO: TIntegerField;
    QueryListaCAPACIDADE: TFMTBCDField;
    QueryBaseID_TANQUE: TIntegerField;
    QueryBaseID_PRODUTO: TIntegerField;
    QueryBaseCAPACIDADE: TFMTBCDField;
  private
    function Bombas(const pIdBomba: integer): TStream;
    function ListBombas: TStream;
    function updateBombas(const AStream: TStream): Boolean;
    { Private declarations }
  public
    { Public declarations }
  end;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

function TDsmTanque.Bombas(const pIdBomba: integer): TStream;
begin
  Result := nil;
  try
    Result := Unique(pIdBomba, QueryBase);
  except on
    E: Exception do
      raise;
  end;
end;

function TDsmTanque.ListBombas: TStream;
begin
  Result := nil;
  try
    Result := List(QueryLista);
  except on
    E: Exception do
      raise;
  end;
end;

function TDsmTanque.updateBombas(const AStream: TStream): Boolean;
begin
  Result := False;
  try
    Result := Update(AStream, FDSchemaAdapter);
  except on
    E: Exception do
      raise;
  end;
end;

end.

