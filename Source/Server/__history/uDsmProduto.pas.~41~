unit uDsmProduto;

interface

uses
  System.SysUtils, System.Classes, Datasnap.DSServer,
  Datasnap.DSAuth, Datasnap.DSProviderDataModuleAdapter, System.JSON, uDsmBase,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.Phys.FB, FireDAC.Phys.FBDef, FireDAC.VCLUI.Wait,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, FireDAC.Phys.IBBase,
  FireDAC.Stan.StorageJSON, FireDAC.Stan.StorageBin;

type
  TDsmProduto = class(TDsmBase)
    QueryListaID_PRODUTO: TIntegerField;
    QueryListaVR_VENDA: TFMTBCDField;
    QueryListaVR_CUSTO: TFMTBCDField;
    QueryListaQTDE_ESTOQUE: TFMTBCDField;
    QueryListaPER_IMPOSTO: TFMTBCDField;
    QueryListaDESCRICAO: TStringField;
    QueryBaseID_PRODUTO: TIntegerField;
    QueryBaseVR_VENDA: TFMTBCDField;
    QueryBaseVR_CUSTO: TFMTBCDField;
    QueryBaseQTDE_ESTOQUE: TFMTBCDField;
    QueryBasePER_IMPOSTO: TFMTBCDField;
    QueryBaseDESCRICAO: TStringField;
  private
    { Private declarations }
  public
    { Public declarations }
    function ListProdutos: TStream; //GET  - SELECT ...
    function Produtos(const pIDProduto: integer): TStream; //GET  - SELECT ...
    procedure updateProdutos(const AStream: TStream); //POST    - INSERT INTO ...
  end;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TDsmProduto }

function CopyStream(const AStream: TStream): TMemoryStream;
var
  LBuffer: TBytes;
  LCount: Integer;
begin
  Result := TMemoryStream.Create;
  try
    SetLength(LBuffer, 1024 * 32);
    while True do
    begin
      LCount := AStream.Read(LBuffer, Length(LBuffer));
      Result.Write(LBuffer, LCount);
      if LCount < Length(LBuffer) then
        break;
    end;
  except on
    E: Exception do
    begin
      Result.Free;
      raise;
    end;
  end;
end;

function TDsmProduto.ListProdutos: TStream;
begin
  try
    QueryLista.Close;
    QueryLista.Open;
    Result := TMemoryStream.Create;
    QueryLista.SaveToStream(Result, TFDStorageFormat.sfJSON);
    Result.Position := 0;
  except on
    E: Exception do
      raise;
  end;
end;

function TDsmProduto.Produtos(const pIDProduto: integer): TStream;
begin
  try
    QueryBase.Close;
    QueryBase.ParamByName('ID_PRODUTO').AsInteger := pIDProduto;
    QueryBase.Open;
    Result := TMemoryStream.Create;
    FDSchemaAdapter.SaveToStream(Result, TFDStorageFormat.sfJSON);
    Result.Position := 0;
  except on
    E: Exception do
      raise;
  end;
end;

procedure TDsmProduto.updateProdutos(const AStream: TStream);
var
  LMemStream: TMemoryStream;
begin
  try
    LMemStream := CopyStream(AStream);
    LMemStream.Position := 0;
    try
      FDSchemaAdapter.LoadFromStream(LMemStream, TFDStorageFormat.sfJSON);
      if FDSchemaAdapter.ApplyUpdates <> 0 then
        raise Exception.Create('Não foi possível salvar as alterações');
    finally
      LMemStream.Free;
    end;
  except on
    E: Exception do
      raise;
  end;
end;

end.



