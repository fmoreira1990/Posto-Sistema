unit uDsmProduto;

interface

uses
  System.SysUtils, System.Classes, Datasnap.DSServer,
  Datasnap.DSAuth, Datasnap.DSProviderDataModuleAdapter, System.JSON, uDsmBase,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.Phys.FB, FireDAC.Phys.FBDef, FireDAC.VCLUI.Wait,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, FireDAC.Phys.IBBase,
  Data.FireDACJSONReflect, FireDAC.Stan.StorageJSON;

type
  TDsmProduto = class(TDsmBase)
    FDStanStorageJSONLink: TFDStanStorageJSONLink;
  private
    { Private declarations }
  public
    { Public declarations }
    function Produtos(const pIDProduto: integer): TFDJSONDataSets; //GET  - SELECT ...
    function updateProdutos: TJSONArray; //POST    - INSERT INTO ...
    function acceptProdutos(const pIDProduto: integer): TJSONArray; //PUT     - UPDATE ...
    function cancelProdutos(const pIDProduto: integer): TJSONArray; //DELETE  - DELETE ...
  end;

implementation

  {%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

  { TDsmProduto }

function TDsmProduto.acceptProdutos(const pIDProduto: integer): TJSONArray;
begin

end;

function TDsmProduto.cancelProdutos(const pIDProduto: integer): TJSONArray;
begin

end;

function TDsmProduto.Produtos(const pIDProduto: integer): TFDJSONDataSets;
begin
  Query.Close;
  Query.SQL.Text := 'select * from tb_produto';

  if pIDProduto > 0 then
  begin
    Query.SQL.Add(' where id_produto = :id_produto');
    Query.Params.CreateParam(ftInteger, 'id_produto', ptInput);
    Query.ParamByName('id_produto').AsInteger := pIDProduto;
  end;

  //Query.Open;
  Result := TFDJSONDataSets.Create;
  TFDJSONDataSetsWriter.ListAdd(Result, Query);
end;

function TDsmProduto.updateProdutos: TJSONArray;
begin

end;

end.



